from findLocalSignalPosition import fromLongRefFindShortQuery
from multiprocessing import Pool
import numpy as np
from tqdm import tqdm
import matplotlib.pyplot as plt
import random
import os

querySignalAdapter_kit = [-0.588, -0.588, -0.588, -0.588, -0.588, -0.588, -0.588, -0.588, -0.787, -0.787, -0.787, -0.787, -0.787, -0.787, -0.787, 1.136, 1.136, 1.136, 1.136, 1.136, 1.136, 1.136, -0.578, -0.578, -0.578, -0.578, -0.578, -0.578, -0.578, -0.578, 0.709, 0.709, 0.709, 0.709, 0.709, 0.709, 0.709, 0.709, 0.709, -0.197, -0.197, -0.197, -0.197, -0.197, -0.197, -0.197, -0.197, -0.482, -0.482, -0.482, -0.482, -0.482, -0.482, -0.482, 0.407, 0.407, 0.407, 0.407, 0.407, 0.407, 0.407, 1.156, 1.156, 1.156, 1.156, 1.156, 1.156, 1.156, 1.156, 1.156, 1.156, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, 0.181, -1.904, -1.904, -1.904, -1.904, -1.904, -1.904, -1.904, -1.904, -1.904, -1.904, 0.345, 0.345, 0.345, 0.345, 0.345, 0.345, 1.197, 1.197, 1.197, 1.197, 1.197, 1.197, 1.197, 1.197, 1.197, 0.466, 0.466, 0.466, 0.466, 0.466, 0.466, 0.466, 0.466, -0.960, -0.960, -0.960, -0.960, -0.960, -0.960, -0.960, -0.960, -1.879, -1.879, -1.879, -1.879, -1.879, -1.879, -1.879, -1.879, 0.641, 0.641, 0.641, 0.641, 0.641, 0.641, 0.641, 0.641, 0.562, 0.562, 0.562, 0.562, 0.562, 0.562, 0.562, 0.030, 0.030, 0.030, 0.030, 0.030, 0.030, 0.030, 0.030, 0.030, 0.348, 0.348, 0.348, 0.348, 0.348, 0.348, 0.348, 0.348, 0.348, -0.860, -0.860, -0.860, -0.860, -0.860, -0.860, -0.860, -0.860, -0.860, -0.860, 0.881, 0.881, 0.881, 0.881, 0.881, 0.881, 0.881, 0.881, 0.881, 0.881, -0.972, -0.972, -0.972, -0.972, -0.972, -0.972, -0.972, -0.972, -0.972, 0.783, 0.783, 0.783, 0.783, 0.783, 0.783, 0.783, 0.783, 0.783, 0.783, 0.686, 0.686, 0.686, 0.686, 0.686, 0.686, 0.686, 0.686, 0.686, 0.686, -0.467, -0.467, -0.467, -0.467, -0.467, -0.467, -0.467, -0.467, -0.467, -0.467, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.169, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140]
supposeBarcodeSigLength = 310
native_start_barcodes = {1: [0.057, 0.057, 0.057, 0.057, 0.057, 0.057, 0.057, -0.346, -0.346, -0.346, -0.346, -0.346, -0.346, -0.346, -0.346, -0.346, -1.260, -1.260, -1.260, -1.260, -1.260, -1.260, -1.260, -1.260, -1.260, -1.971, -1.971, -1.971, -1.971, -1.971, -1.971, -1.971, -1.971, 0.800, 0.800, 0.800, 0.800, 0.800, 0.800, 0.800, 0.800, 0.748, 0.748, 0.748, 0.748, 0.748, 0.748, -0.506, -0.506, -0.506, -0.506, -0.506, -0.506, -0.047, -0.047, -0.047, -0.047, -0.047, -0.047, -0.047, -0.047, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.264, 0.264, 0.264, 0.264, 0.264, 0.264, 1.148, 1.148, 1.148, 1.148, 1.148, 1.148, 1.148, 1.148, 0.209, 0.209, 0.209, 0.209, 0.209, 0.209, -0.299, -0.299, -0.299, -0.299, -0.299, -0.299, -0.299, -0.299, -0.693, -0.693, -0.693, -0.693, -0.693, -0.693, -0.693, -0.693, -1.315, -1.315, -1.315, -1.315, -1.315, -1.315, -1.315, -1.315, -0.440, -0.440, -0.440, -0.440, -0.440, -0.440, -0.440, 0.551, 0.551, 0.551, 0.551, 0.551, 0.551, 0.551, 0.078, 0.078, 0.078, 0.078, 0.078, 0.078, 0.078, 1.079, 1.079, 1.079, 1.079, 1.079, 1.079, 0.321, 0.321, 0.321, 0.321, 0.321, 0.321, 0.321, -1.001, -1.001, -1.001, -1.001, -1.001, -1.001, -1.001, -0.222, -0.222, -0.222, -0.222, -0.222, -0.222, -0.222, 1.003, 1.003, 1.003, 1.003, 1.003, 1.003, 1.003, 1.003, -0.558, -0.558, -0.558, -0.558, -0.558, -0.558, -0.558, -0.558, -0.558, -0.463, -0.463, -0.463, -0.463, -0.463, -0.463, -0.212, -0.212, -0.212, -0.212, -0.212, -0.212, -0.212, 0.079, 0.079, 0.079, 0.079, 0.079, 0.079, 0.079, 0.344, 0.344, 0.344, 0.344, 0.344, 0.344, 1.271, 1.271, 1.271, 1.271, 1.271, 1.271, 1.271, 1.271, -0.498, -0.498, -0.498, -0.498, -0.498, -0.498, -0.498, 0.487, 0.487, 0.487, 0.487, 0.487, 0.487, 0.487, 0.487, 1.174, 1.174, 1.174, 1.174, 1.174, 1.174, 1.174, 1.174, 0.537, 0.537, 0.537, 0.537, 0.537, 0.537, 0.537, 0.537, -0.518, -0.518, -0.518, -0.518, -0.518, -0.518, -0.518, -0.390, -0.390, -0.390, -0.390, -0.390, -0.390, -0.390, -0.390, 0.392, 0.392, 0.392, 0.392, 0.392, 0.392, 0.392, 0.392, 0.392, 0.392, 0.392, -0.048, -0.048, -0.048, -0.048, -0.048, -0.048, -0.048, -0.048, -0.048, -0.048, -0.048, -0.048, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.129, 0.079, 0.079, 0.079, 0.079, 0.079, 0.079, 0.079, 0.079, 0.079, 0.079, 0.079, 0.079, 0.079],
                         2: [-0.079, -0.079, -0.079, -0.079, -0.079, -0.079, -0.079, -0.079, -0.321, -0.321, -0.321, -0.321, -0.321, -0.321, -0.321, -0.321, -0.321, -1.305, -1.305, -1.305, -1.305, -1.305, -1.305, -1.305, -1.305, -2.072, -2.072, -2.072, -2.072, -2.072, -2.072, -2.072, -2.072, 0.809, 0.809, 0.809, 0.809, 0.809, 0.809, 0.809, 0.809, 0.971, 0.971, 0.971, 0.971, 0.971, 0.971, 0.971, 0.971, -0.076, -0.076, -0.076, -0.076, -0.076, -0.076, -0.076, -0.889, -0.889, -0.889, -0.889, -0.889, -0.889, -0.889, -0.214, -0.214, -0.214, -0.214, -0.214, -0.214, -0.214, 1.108, 1.108, 1.108, 1.108, 1.108, 1.108, 1.108, -0.590, -0.590, -0.590, -0.590, -0.590, -0.590, -0.590, -1.439, -1.439, -1.439, -1.439, -1.439, -1.439, -1.439, -1.439, -0.438, -0.438, -0.438, -0.438, -0.438, -0.438, -0.438, -0.438, 0.580, 0.580, 0.580, 0.580, 0.580, 0.580, 0.580, 0.580, -1.146, -1.146, -1.146, -1.146, -1.146, -1.146, -1.146, -1.146, -1.146, -1.146, -1.146, -0.606, -0.606, -0.606, -0.606, -0.606, -0.606, -0.606, -0.606, -0.606, -0.606, 0.555, 0.555, 0.555, 0.555, 0.555, 0.555, 0.555, 0.555, 0.948, 0.948, 0.948, 0.948, 0.948, 0.948, 0.948, 0.948, 0.948, 0.331, 0.331, 0.331, 0.331, 0.331, 0.331, 0.331, 1.222, 1.222, 1.222, 1.222, 1.222, 1.222, 1.222, 1.222, 1.222, -0.005, -0.005, -0.005, -0.005, -0.005, -0.005, -0.005, -0.005, -0.005, -0.881, -0.881, -0.881, -0.881, -0.881, -0.881, -0.881, -0.881, -0.881, -0.342, -0.342, -0.342, -0.342, -0.342, -0.342, -0.342, -0.342, 0.887, 0.887, 0.887, 0.887, 0.887, 0.887, 0.887, 0.887, 0.887, -0.275, -0.275, -0.275, -0.275, -0.275, -0.275, -0.275, -1.255, -1.255, -1.255, -1.255, -1.255, -1.255, -1.814, -1.814, -1.814, -1.814, -1.814, -1.814, -1.814, -1.814, -1.177, -1.177, -1.177, -1.177, -1.177, -1.177, 2.020, 2.020, 2.020, 2.020, 2.020, 2.020, 2.020, 0.436, 0.436, 0.436, 0.436, 0.436, 0.436, 0.436, -1.061, -1.061, -1.061, -1.061, -1.061, -1.061, -1.061, -1.061, -0.371, -0.371, -0.371, -0.371, -0.371, -0.371, -0.371, -0.371, 0.807, 0.807, 0.807, 0.807, 0.807, 0.807, 0.807, 0.807, -0.517, -0.517, -0.517, -0.517, -0.517, -0.517, -0.517, -0.517, -0.393, -0.393, -0.393, -0.393, -0.393, -0.393, -0.393, 0.406, 0.406, 0.406, 0.406, 0.406, 0.406, 0.406, 0.406, 0.406, 0.406, 0.406, -0.044, -0.044, -0.044, -0.044, -0.044, -0.044, -0.044, -0.044, -0.044, -0.044, -0.044, -0.044, -0.044, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.114, 0.114, 0.114, 0.114, 0.114, 0.114, 0.114, 0.114, 0.114, 0.114, 0.114],
                         3: [0.030, 0.030, 0.030, 0.030, 0.030, 0.030, 0.030, 0.030, 0.030, -0.320, -0.320, -0.320, -0.320, -0.320, -0.320, -0.320, -0.320, -0.320, -1.263, -1.263, -1.263, -1.263, -1.263, -1.263, -1.263, -1.263, -1.983, -1.983, -1.983, -1.983, -1.983, -1.983, 0.843, 0.843, 0.843, 0.843, 0.843, 0.843, 0.843, 0.843, 0.843, 0.843, 0.789, 0.789, 0.789, 0.789, 0.789, 0.789, 0.789, 0.789, -0.589, -0.589, -0.589, -0.589, -0.589, -0.589, -0.589, -0.589, -0.221, -0.221, -0.221, -0.221, -0.221, -0.221, -0.221, -0.221, -0.221, 0.841, 0.841, 0.841, 0.841, 0.841, 0.841, 0.841, 0.841, 0.841, 0.841, 0.299, 0.299, 0.299, 0.299, 0.299, 0.299, 0.299, 0.299, 0.299, 1.107, 1.107, 1.107, 1.107, 1.107, 1.107, 1.107, 1.107, -0.621, -0.621, -0.621, -0.621, -0.621, -0.621, -0.621, -1.083, -1.083, -1.083, -1.083, -1.083, -1.083, -1.083, -1.083, 0.704, 0.704, 0.704, 0.704, 0.704, 0.704, 0.704, 0.704, -0.609, -0.609, -0.609, -0.609, -0.609, -0.609, -0.609, -0.354, -0.354, -0.354, -0.354, -0.354, -0.354, -0.354, -0.354, 0.363, 0.363, 0.363, 0.363, 0.363, 0.363, 0.363, 0.363, 1.032, 1.032, 1.032, 1.032, 1.032, 1.032, 1.032, 1.032, 1.032, -0.107, -0.107, -0.107, -0.107, -0.107, -0.107, -0.107, -0.107, -1.242, -1.242, -1.242, -1.242, -1.242, -1.242, -1.242, -2.130, -2.130, -2.130, -2.130, -2.130, -2.130, -0.756, -0.756, -0.756, -0.756, -0.756, -0.756, 0.489, 0.489, 0.489, 0.489, 0.489, 0.489, 0.489, 0.180, 0.180, 0.180, 0.180, 0.180, 0.180, 1.084, 1.084, 1.084, 1.084, 1.084, 1.084, 0.053, 0.053, 0.053, 0.053, 0.053, 0.053, 0.053, -0.624, -0.624, -0.624, -0.624, -0.624, -0.624, -0.624, -1.410, -1.410, -1.410, -1.410, -1.410, -1.410, -1.410, -0.724, -0.724, -0.724, -0.724, -0.724, -0.724, -0.724, -0.724, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 1.520, 1.520, 1.520, 1.520, 1.520, 1.520, 1.520, 1.520, 0.789, 0.789, 0.789, 0.789, 0.789, 0.789, 0.789, 0.789, 0.580, 0.580, 0.580, 0.580, 0.580, 0.580, 0.580, 0.580, 0.580, -0.411, -0.411, -0.411, -0.411, -0.411, -0.411, -0.411, -0.411, -0.293, -0.293, -0.293, -0.293, -0.293, -0.293, -0.293, -0.293, 0.455, 0.455, 0.455, 0.455, 0.455, 0.455, 0.455, 0.455, 0.455, 0.455, 0.455, -0.003, -0.003, -0.003, -0.003, -0.003, -0.003, -0.003, -0.003, -0.003, -0.003, -0.003, -0.003, -0.003, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.722, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.166, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117],
                         4: [0.054, 0.054, 0.054, 0.054, 0.054, 0.054, 0.054, 0.054, 0.054, 0.054, -0.357, -0.357, -0.357, -0.357, -0.357, -0.357, -0.357, -0.357, -0.357, -0.357, -1.335, -1.335, -1.335, -1.335, -1.335, -1.335, -1.335, -1.335, -2.039, -2.039, -2.039, -2.039, -2.039, -2.039, -2.039, -2.039, 0.797, 0.797, 0.797, 0.797, 0.797, 0.797, 0.797, 0.824, 0.824, 0.824, 0.824, 0.824, 0.824, 0.824, 0.824, -0.619, -0.619, -0.619, -0.619, -0.619, -0.619, -0.498, -0.498, -0.498, -0.498, -0.498, -0.498, -0.498, -0.498, 1.175, 1.175, 1.175, 1.175, 1.175, 1.175, 1.175, 1.175, -0.080, -0.080, -0.080, -0.080, -0.080, -0.080, -0.080, -0.080, -0.681, -0.681, -0.681, -0.681, -0.681, -0.681, -0.681, -0.681, -0.681, -0.681, -1.038, -1.038, -1.038, -1.038, -1.038, -1.038, -1.038, -1.038, -1.038, -1.278, -1.278, -1.278, -1.278, -1.278, -1.278, -1.278, -1.278, -1.278, -1.278, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -1.022, -0.945, -0.945, -0.945, -0.945, -0.945, -0.945, -0.945, -0.945, -0.945, -0.222, -0.222, -0.222, -0.222, -0.222, -0.222, -0.222, -0.222, 0.675, 0.675, 0.675, 0.675, 0.675, 0.675, 0.675, 0.261, 0.261, 0.261, 0.261, 0.261, 0.261, 0.716, 0.716, 0.716, 0.716, 0.716, 0.716, -1.130, -1.130, -1.130, -1.130, -1.130, -1.130, -1.130, -0.913, -0.913, -0.913, -0.913, -0.913, -0.913, -0.913, -0.913, 1.227, 1.227, 1.227, 1.227, 1.227, 1.227, 1.227, 1.227, 0.040, 0.040, 0.040, 0.040, 0.040, 0.040, 0.040, 0.040, -0.836, -0.836, -0.836, -0.836, -0.836, -0.836, -0.836, -0.836, -0.836, -1.536, -1.536, -1.536, -1.536, -1.536, -1.536, -1.536, -1.132, -1.132, -1.132, -1.132, -1.132, -1.132, 2.017, 2.017, 2.017, 2.017, 2.017, 2.017, 2.017, 2.017, 0.817, 0.817, 0.817, 0.817, 0.817, 0.817, 0.573, 0.573, 0.573, 0.573, 0.573, 0.573, 0.573, 0.573, -0.568, -0.568, -0.568, -0.568, -0.568, -0.568, -0.568, -1.357, -1.357, -1.357, -1.357, -1.357, -1.357, -1.357, -1.357, -1.357, -0.193, -0.193, -0.193, -0.193, -0.193, -0.193, -0.193, -0.193, 0.842, 0.842, 0.842, 0.842, 0.842, 0.842, 0.842, 0.842, 0.842, -0.483, -0.483, -0.483, -0.483, -0.483, -0.483, -0.483, -0.483, -0.335, -0.335, -0.335, -0.335, -0.335, -0.335, -0.335, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, 0.757, 0.757, 0.757, 0.757, 0.757, 0.757, 0.757, 0.757, 0.757, 0.757, 0.757, 0.757, 0.757, 0.757, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.106, 0.106, 0.106, 0.106, 0.106, 0.106, 0.106, 0.106, 0.106, 0.106, 0.106],
                         5: [-0.025, -0.025, -0.025, -0.025, -0.025, -0.025, -0.025, -0.025, -0.025, -0.358, -0.358, -0.358, -0.358, -0.358, -0.358, -0.358, -0.358, -0.358, -0.358, -1.320, -1.320, -1.320, -1.320, -1.320, -1.320, -1.320, -2.059, -2.059, -2.059, -2.059, -2.059, -2.059, -2.059, 0.710, 0.710, 0.710, 0.710, 0.710, 0.710, 0.710, 0.878, 0.878, 0.878, 0.878, 0.878, 0.878, -0.028, -0.028, -0.028, -0.028, -0.028, -0.028, -0.192, -0.192, -0.192, -0.192, -0.192, -0.192, -0.468, -0.468, -0.468, -0.468, -0.468, -0.468, -0.468, -0.468, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -1.243, -1.243, -1.243, -1.243, -1.243, -1.243, -1.913, -1.913, -1.913, -1.913, -1.913, -1.913, -1.913, 0.612, 0.612, 0.612, 0.612, 0.612, 0.612, 0.608, 0.608, 0.608, 0.608, 0.608, 0.608, 0.608, 0.608, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.508, 0.508, 0.508, 0.508, 0.508, 0.508, 0.508, 0.508, 0.508, 0.508, 0.327, 0.327, 0.327, 0.327, 0.327, 0.327, 0.327, 0.327, 1.176, 1.176, 1.176, 1.176, 1.176, 1.176, 1.176, 1.176, -0.052, -0.052, -0.052, -0.052, -0.052, -0.052, -0.052, -0.052, -0.959, -0.959, -0.959, -0.959, -0.959, -0.959, -0.959, -0.959, -0.959, -0.959, -0.959, -0.464, -0.464, -0.464, -0.464, -0.464, -0.464, -0.464, -0.464, -0.464, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.478, 0.478, 0.478, 0.478, 0.478, 0.478, 0.478, 0.478, 0.296, 0.296, 0.296, 0.296, 0.296, 0.296, 0.296, 0.296, 0.296, 1.290, 1.290, 1.290, 1.290, 1.290, 1.290, 1.290, 1.290, 1.290, -0.468, -0.468, -0.468, -0.468, -0.468, -0.468, -1.985, -1.985, -1.985, -1.985, -1.985, -1.985, -1.985, -0.614, -0.614, -0.614, -0.614, -0.614, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, 0.959, -0.149, -0.149, -0.149, -0.149, -0.149, -0.149, -0.742, -0.742, -0.742, -0.742, -0.742, -0.742, -0.742, -0.742, -0.310, -0.310, -0.310, -0.310, -0.310, -0.310, -0.310, -0.310, 0.733, 0.733, 0.733, 0.733, 0.733, 0.733, 0.733, 0.733, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.530, -0.364, -0.364, -0.364, -0.364, -0.364, -0.364, -0.364, 0.401, 0.401, 0.401, 0.401, 0.401, 0.401, 0.401, 0.401, 0.401, 0.401, 0.401, 0.401, -0.061, -0.061, -0.061, -0.061, -0.061, -0.061, -0.061, -0.061, -0.061, -0.061, -0.061, -0.061, -0.061, 0.721, 0.721, 0.721, 0.721, 0.721, 0.721, 0.721, 0.721, 0.721, 0.721, 0.721, 0.721, 0.721, 0.721, 0.190, 0.190, 0.190, 0.190, 0.190, 0.190, 0.190, 0.190, 0.190, 0.190, 0.190, 0.190, 0.190, 0.190, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135, 0.135],
                         6: [-0.028, -0.028, -0.028, -0.028, -0.028, -0.028, -0.028, -0.360, -0.360, -0.360, -0.360, -0.360, -0.360, -0.360, -0.360, -1.260, -1.260, -1.260, -1.260, -1.260, -1.260, -1.260, -2.002, -2.002, -2.002, -2.002, -2.002, -2.002, -2.002, -2.002, 0.733, 0.733, 0.733, 0.733, 0.733, 0.733, 0.886, 0.886, 0.886, 0.886, 0.886, 0.886, 0.029, 0.029, 0.029, 0.029, 0.029, 0.029, -0.517, -0.517, -0.517, -0.517, -0.517, -0.517, -0.517, -0.517, -0.517, -1.477, -1.477, -1.477, -1.477, -1.477, -1.477, -1.477, -0.626, -0.626, -0.626, -0.626, -0.626, -0.626, -0.626, -0.626, 0.537, 0.537, 0.537, 0.537, 0.537, 0.537, 0.919, 0.919, 0.919, 0.919, 0.919, 0.919, 0.919, 0.919, 0.026, 0.026, 0.026, 0.026, 0.026, 0.026, -0.219, -0.219, -0.219, -0.219, -0.219, -0.219, -0.219, 0.110, 0.110, 0.110, 0.110, 0.110, 0.110, 0.110, 0.321, 0.321, 0.321, 0.321, 0.321, 0.321, 0.321, 0.321, 1.230, 1.230, 1.230, 1.230, 1.230, 1.230, 1.230, 1.230, 0.018, 0.018, 0.018, 0.018, 0.018, 0.018, 0.018, 0.018, 0.018, 0.783, 0.783, 0.783, 0.783, 0.783, 0.783, 0.783, 0.783, 0.783, -0.155, -0.155, -0.155, -0.155, -0.155, -0.155, -0.155, -0.155, 0.583, 0.583, 0.583, 0.583, 0.583, 0.583, 0.583, 0.583, 0.583, -0.477, -0.477, -0.477, -0.477, -0.477, -0.477, -0.477, -0.477, 0.305, 0.305, 0.305, 0.305, 0.305, 0.305, 0.305, 0.305, 0.305, 0.283, 0.283, 0.283, 0.283, 0.283, 0.283, 0.283, 0.283, 0.718, 0.718, 0.718, 0.718, 0.718, 0.718, 0.718, 0.718, -0.135, -0.135, -0.135, -0.135, -0.135, -0.135, 0.408, 0.408, 0.408, 0.408, 0.408, 0.408, 0.408, 0.408, -0.529, -0.529, -0.529, -0.529, -0.529, -0.529, -0.529, -0.710, -0.710, -0.710, -0.710, -0.710, -0.710, -0.710, -0.710, -0.710, -1.107, -1.107, -1.107, -1.107, -1.107, -1.107, -1.107, -1.107, -1.402, -1.402, -1.402, -1.402, -1.402, -1.402, -1.402, -1.402, -1.402, -0.227, -0.227, -0.227, -0.227, -0.227, -0.227, -0.227, -0.227, 0.835, 0.835, 0.835, 0.835, 0.835, 0.835, 0.835, 0.835, 0.835, -0.478, -0.478, -0.478, -0.478, -0.478, -0.478, -0.478, -0.478, -0.340, -0.340, -0.340, -0.340, -0.340, -0.340, -0.340, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, 0.434, -0.055, -0.055, -0.055, -0.055, -0.055, -0.055, -0.055, -0.055, -0.055, -0.055, -0.055, -0.055, 0.727, 0.727, 0.727, 0.727, 0.727, 0.727, 0.727, 0.727, 0.727, 0.727, 0.727, 0.727, 0.727, 0.727, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.163, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111],
                         7: [-0.027, -0.027, -0.027, -0.027, -0.027, -0.027, -0.027, -0.027, -0.027, -0.356, -0.356, -0.356, -0.356, -0.356, -0.356, -0.356, -0.356, -0.356, -0.356, -1.316, -1.316, -1.316, -1.316, -1.316, -1.316, -1.316, -1.316, -2.068, -2.068, -2.068, -2.068, -2.068, -2.068, -2.068, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.725, 0.890, 0.890, 0.890, 0.890, 0.890, 0.890, 0.890, 0.099, 0.099, 0.099, 0.099, 0.099, 0.099, 0.099, 0.099, -0.207, -0.207, -0.207, -0.207, -0.207, -0.207, -0.496, -0.496, -0.496, -0.496, -0.496, -0.496, -0.392, -0.392, -0.392, -0.392, -0.392, -0.392, -0.921, -0.921, -0.921, -0.921, -0.921, -1.827, -1.827, -1.827, -1.827, -1.827, -1.827, -1.854, -1.854, -1.854, -1.854, -1.854, -1.854, -1.854, -1.854, 0.694, 0.694, 0.694, 0.694, 0.694, 0.694, 0.694, 0.694, 0.694, 1.213, 1.213, 1.213, 1.213, 1.213, 1.213, 1.213, 1.213, 1.213, 1.213, 0.283, 0.283, 0.283, 0.283, 0.283, 0.283, 0.283, 0.283, 0.283, -1.235, -1.235, -1.235, -1.235, -1.235, -1.235, 0.429, 0.429, 0.429, 0.429, 0.429, 0.429, 0.429, 0.429, 0.429, 0.429, 1.283, 1.283, 1.283, 1.283, 1.283, 1.283, 1.283, 0.549, 0.549, 0.549, 0.549, 0.549, 0.549, 0.644, 0.644, 0.644, 0.644, 0.644, 0.644, 0.644, 0.466, 0.466, 0.466, 0.466, 0.466, 0.466, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.251, 0.647, 0.647, 0.647, 0.647, 0.647, 0.647, 0.647, 0.647, 0.647, -0.842, -0.842, -0.842, -0.842, -0.842, -0.842, -0.842, -1.055, -1.055, -1.055, -1.055, -1.055, -1.055, -1.055, 0.783, 0.783, 0.783, 0.783, 0.783, 0.783, 0.783, -0.563, -0.563, -0.563, -0.563, -0.563, -0.563, -0.106, -0.106, -0.106, -0.106, -0.106, -0.106, -0.106, -0.106, 0.522, 0.522, 0.522, 0.522, 0.522, 0.522, 0.522, 0.107, 0.107, 0.107, 0.107, 0.107, 0.107, 0.107, 0.107, 1.132, 1.132, 1.132, 1.132, 1.132, 1.132, 1.132, 1.132, 0.628, 0.628, 0.628, 0.628, 0.628, 0.628, 0.628, 0.628, -0.467, -0.467, -0.467, -0.467, -0.467, -0.467, -0.467, -0.467, -0.340, -0.340, -0.340, -0.340, -0.340, -0.340, -0.340, 0.390, 0.390, 0.390, 0.390, 0.390, 0.390, 0.390, 0.390, 0.390, 0.390, 0.390, 0.390, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, 0.728, 0.728, 0.728, 0.728, 0.728, 0.728, 0.728, 0.728, 0.728, 0.728, 0.728, 0.728, 0.728, 0.728, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113, 0.113],
                         8: [-0.072, -0.072, -0.072, -0.072, -0.072, -0.072, -0.072, -0.072, -0.072, -0.337, -0.337, -0.337, -0.337, -0.337, -0.337, -0.337, -1.320, -1.320, -1.320, -1.320, -1.320, -1.320, -1.320, -1.320, -2.096, -2.096, -2.096, -2.096, -2.096, -2.096, -2.096, 0.763, 0.763, 0.763, 0.763, 0.763, 0.763, 0.763, 0.763, 0.911, 0.911, 0.911, 0.911, 0.911, 0.911, 0.911, -0.039, -0.039, -0.039, -0.039, -0.039, -0.039, -0.039, -0.039, -0.039, -0.749, -0.749, -0.749, -0.749, -0.749, -0.749, -0.749, -0.749, -0.749, -0.749, -0.381, -0.381, -0.381, -0.381, -0.381, -0.381, -0.381, -0.381, 0.601, 0.601, 0.601, 0.601, 0.601, 0.601, 0.601, -0.613, -0.613, -0.613, -0.613, -0.613, -0.613, -0.613, -0.613, -0.613, 0.986, 0.986, 0.986, 0.986, 0.986, 0.986, 0.986, 0.986, 0.986, -0.584, -0.584, -0.584, -0.584, -0.584, -0.584, -0.584, -0.584, -0.584, -0.584, -0.395, -0.395, -0.395, -0.395, -0.395, -0.395, -0.395, -0.206, -0.206, -0.206, -0.206, -0.206, 0.703, 0.703, 0.703, 0.703, 0.703, 0.703, 0.703, 0.703, 0.791, 0.791, 0.791, 0.791, 0.791, 0.791, -0.652, -0.652, -0.652, -0.652, -0.652, -0.652, -0.652, -2.058, -2.058, -2.058, -2.058, -2.058, -2.058, -2.058, -2.058, -0.079, -0.079, -0.079, -0.079, -0.079, -0.079, -0.079, -0.079, -0.079, 0.246, 0.246, 0.246, 0.246, 0.246, 0.246, 0.246, 0.246, 0.624, 0.624, 0.624, 0.624, 0.624, 0.624, 0.624, 0.624, -1.467, -1.467, -1.467, -1.467, -1.467, -1.467, -1.467, -1.467, -1.467, -1.467, 0.224, 0.224, 0.224, 0.224, 0.224, 0.224, 0.224, 0.224, 1.035, 1.035, 1.035, 1.035, 1.035, 1.035, 1.035, 1.035, 0.357, 0.357, 0.357, 0.357, 0.357, 0.357, 0.316, 0.316, 0.316, 0.316, 0.316, 0.316, 0.316, 0.316, 0.316, 0.312, 0.312, 0.312, 0.312, 0.312, 0.312, 0.312, 0.312, 1.162, 1.162, 1.162, 1.162, 1.162, 1.162, 1.162, 1.162, 1.162, -0.435, -0.435, -0.435, -0.435, -0.435, -0.435, -0.435, -1.482, -1.482, -1.482, -1.482, -1.482, -1.482, -1.482, -1.482, -1.482, -0.271, -0.271, -0.271, -0.271, -0.271, -0.271, -0.271, 0.777, 0.777, 0.777, 0.777, 0.777, 0.777, 0.777, 0.777, -0.511, -0.511, -0.511, -0.511, -0.511, -0.511, -0.511, -0.511, -0.362, -0.362, -0.362, -0.362, -0.362, -0.362, -0.362, 0.420, 0.420, 0.420, 0.420, 0.420, 0.420, 0.420, 0.420, 0.420, 0.420, 0.420, -0.050, -0.050, -0.050, -0.050, -0.050, -0.050, -0.050, -0.050, -0.050, -0.050, -0.050, -0.050, 0.741, 0.741, 0.741, 0.741, 0.741, 0.741, 0.741, 0.741, 0.741, 0.741, 0.741, 0.741, 0.741, 0.741, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.147, 0.092, 0.092, 0.092, 0.092, 0.092, 0.092, 0.092, 0.092, 0.092, 0.092, 0.092],
                         9: [-0.030, -0.030, -0.030, -0.030, -0.030, -0.030, -0.347, -0.347, -0.347, -0.347, -0.347, -0.347, -0.347, -0.347, -1.249, -1.249, -1.249, -1.249, -1.249, -1.249, -1.249, -1.249, -1.249, -2.023, -2.023, -2.023, -2.023, -2.023, -2.023, -2.023, 0.699, 0.699, 0.699, 0.699, 0.699, 0.699, 0.699, 0.699, 0.920, 0.920, 0.920, 0.920, 0.920, 0.920, 0.920, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, -0.328, -0.328, -0.328, -0.328, -0.328, -0.328, -0.972, -0.972, -0.972, -0.972, -0.972, -0.972, -0.972, -0.972, -0.310, -0.310, -0.310, -0.310, -0.310, -0.310, -0.310, -0.310, 1.255, 1.255, 1.255, 1.255, 1.255, 1.255, 1.255, 1.255, 0.894, 0.894, 0.894, 0.894, 0.894, 0.894, 0.894, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, -0.605, -0.605, -0.605, -0.605, -0.605, -0.605, -0.605, -1.488, -1.488, -1.488, -1.488, -1.488, -1.488, -1.488, -1.488, -0.715, -0.715, -0.715, -0.715, -0.715, -0.715, -0.715, 0.248, 0.248, 0.248, 0.248, 0.248, 0.248, 0.248, 1.425, 1.425, 1.425, 1.425, 1.425, 1.425, 1.425, 1.425, 1.425, 0.345, 0.345, 0.345, 0.345, 0.345, 0.345, 0.345, 0.345, 0.345, -0.437, -0.437, -0.437, -0.437, -0.437, -0.437, -0.437, -0.437, -0.437, 0.345, 0.345, 0.345, 0.345, 0.345, 0.345, 0.345, 0.857, 0.857, 0.857, 0.857, 0.857, 0.857, -0.842, -0.842, -0.842, -0.842, -0.842, -0.842, -0.842, -0.842, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, 0.746, -0.218, -0.218, -0.218, -0.218, -0.218, -0.218, -0.218, 0.537, 0.537, 0.537, 0.537, 0.537, 0.537, 0.537, 0.278, 0.278, 0.278, 0.278, 0.278, 0.278, 0.278, 1.168, 1.168, 1.168, 1.168, 1.168, 1.168, 1.168, 1.168, -0.476, -0.476, -0.476, -0.476, -0.476, -0.476, -0.476, -0.476, -1.971, -1.971, -1.971, -1.971, -1.971, -1.971, -1.971, -1.971, 0.518, 0.518, 0.518, 0.518, 0.518, 0.518, 0.518, 0.518, 1.210, 1.210, 1.210, 1.210, 1.210, 1.210, 1.210, 0.452, 0.452, 0.452, 0.452, 0.452, 0.452, 0.452, 0.452, -0.574, -0.574, -0.574, -0.574, -0.574, -0.574, -0.574, -0.574, -0.405, -0.405, -0.405, -0.405, -0.405, -0.405, -0.405, -0.405, 0.399, 0.399, 0.399, 0.399, 0.399, 0.399, 0.399, 0.399, 0.399, 0.399, 0.399, 0.399, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, -0.035, 0.753, 0.753, 0.753, 0.753, 0.753, 0.753, 0.753, 0.753, 0.753, 0.753, 0.753, 0.753, 0.753, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.156, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116, 0.116],
                         10: [-0.008, -0.008, -0.008, -0.008, -0.008, -0.008, -0.008, -0.008, -0.008, -0.008, -0.350, -0.350, -0.350, -0.350, -0.350, -0.350, -0.350, -0.350, -0.350, -0.350, -0.350, -0.350, -1.323, -1.323, -1.323, -1.323, -1.323, -1.323, -1.323, -1.323, -2.044, -2.044, -2.044, -2.044, -2.044, -2.044, -2.044, -2.044, 0.742, 0.742, 0.742, 0.742, 0.742, 0.742, 0.742, 0.839, 0.839, 0.839, 0.839, 0.839, 0.839, -0.110, -0.110, -0.110, -0.110, -0.110, -0.110, -0.110, -0.110, -0.110, -0.317, -0.317, -0.317, -0.317, -0.317, -0.317, -0.317, -0.317, -0.317, -0.317, -0.850, -0.850, -0.850, -0.850, -0.850, -0.850, -0.850, -0.850, -0.850, -0.850, -0.850, -0.786, -0.786, -0.786, -0.786, -0.786, -0.786, -0.786, -0.786, -0.786, -0.786, -0.989, -0.989, -0.989, -0.989, -0.989, -0.989, -0.989, -0.989, -0.989, -0.989, -0.989, -0.989, -0.678, -0.678, -0.678, -0.678, -0.678, -0.678, -0.678, -0.678, -1.189, -1.189, -1.189, -1.189, -1.189, -1.189, -1.189, -1.189, -1.947, -1.947, -1.947, -1.947, -1.947, -1.947, -1.947, -0.533, -0.533, -0.533, -0.533, -0.533, -0.533, 1.067, 1.067, 1.067, 1.067, 1.067, 1.067, 1.067, 0.085, 0.085, 0.085, 0.085, 0.085, 0.085, 0.085, -0.378, -0.378, -0.378, -0.378, -0.378, -0.378, -0.378, -0.548, -0.548, -0.548, -0.548, -0.548, -0.548, -0.548, -0.548, -1.168, -1.168, -1.168, -1.168, -1.168, -1.168, -1.168, -2.031, -2.031, -2.031, -2.031, -2.031, -2.031, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.241, 0.241, 0.241, 0.241, 0.241, 0.241, 0.241, 0.241, 0.241, 1.230, 1.230, 1.230, 1.230, 1.230, 1.230, 1.230, 1.230, 1.230, 0.644, 0.644, 0.644, 0.644, 0.644, 0.644, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.516, -0.229, -0.229, -0.229, -0.229, -0.229, -0.229, -0.229, 0.608, 0.608, 0.608, 0.608, 0.608, 0.608, -0.452, -0.452, -0.452, -0.452, -0.452, -0.452, -0.452, -0.452, -0.327, -0.327, -0.327, -0.327, -0.327, -0.327, 0.538, 0.538, 0.538, 0.538, 0.538, 0.538, 0.538, 0.538, 0.538, 1.216, 1.216, 1.216, 1.216, 1.216, 1.216, 1.216, 1.216, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, -0.520, -0.520, -0.520, -0.520, -0.520, -0.520, -0.520, -0.520, -0.384, -0.384, -0.384, -0.384, -0.384, -0.384, -0.384, -0.384, 0.400, 0.400, 0.400, 0.400, 0.400, 0.400, 0.400, 0.400, 0.400, 0.400, 0.400, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, -0.045, 0.717, 0.717, 0.717, 0.717, 0.717, 0.717, 0.717, 0.717, 0.717, 0.717, 0.717, 0.717, 0.717, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.146, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097, 0.097],
                         11: [0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, -0.326, -0.326, -0.326, -0.326, -0.326, -0.326, -0.326, -0.326, -0.326, -1.263, -1.263, -1.263, -1.263, -1.263, -1.263, -1.263, -2.049, -2.049, -2.049, -2.049, -2.049, 0.811, 0.811, 0.811, 0.811, 0.811, 0.811, 0.858, 0.858, 0.858, 0.858, 0.858, 0.858, -0.624, -0.624, -0.624, -0.624, -0.624, -0.624, -0.993, -0.993, -0.993, -0.993, -0.993, -0.993, 1.931, 1.931, 1.931, 1.931, 1.931, 1.931, 1.931, 1.931, 0.809, 0.809, 0.809, 0.809, 0.809, 0.809, 0.809, 0.809, 0.292, 0.292, 0.292, 0.292, 0.292, 0.292, 0.292, 0.292, -1.090, -1.090, -1.090, -1.090, -1.090, -1.090, -1.090, -1.090, -1.090, -1.090, 0.445, 0.445, 0.445, 0.445, 0.445, 0.445, 0.445, 0.445, 1.247, 1.247, 1.247, 1.247, 1.247, 1.247, 1.247, 1.247, 1.247, 1.247, 0.533, 0.533, 0.533, 0.533, 0.533, 0.533, 0.533, 0.533, 0.533, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310, -0.038, -0.038, -0.038, -0.038, -0.038, -0.038, 1.793, 1.793, 1.793, 1.793, 1.793, 1.793, 1.793, 1.793, 1.793, 1.793, 1.793, 0.887, 0.887, 0.887, 0.887, 0.887, 0.887, 0.887, 0.334, 0.334, 0.334, 0.334, 0.334, 0.334, 0.334, -1.264, -1.264, -1.264, -1.264, -1.264, -1.264, -1.264, -0.896, -0.896, -0.896, -0.896, -0.896, -0.896, 1.202, 1.202, 1.202, 1.202, 1.202, 1.202, 1.202, 1.202, -0.167, -0.167, -0.167, -0.167, -0.167, -0.167, -0.167, -0.167, -1.500, -1.500, -1.500, -1.500, -1.500, -1.500, -1.500, -1.500, -1.167, -1.167, -1.167, -1.167, -1.167, -1.167, 1.248, 1.248, 1.248, 1.248, 1.248, 1.248, 1.248, 1.248, 1.248, -0.157, -0.157, -0.157, -0.157, -0.157, -0.157, -0.932, -0.932, -0.932, -0.932, -0.932, -0.932, -0.932, -0.932, -1.149, -1.149, -1.149, -1.149, -1.149, -1.149, -1.149, -1.149, -0.390, -0.390, -0.390, -0.390, -0.390, -0.390, -0.390, -0.390, 1.197, 1.197, 1.197, 1.197, 1.197, 1.197, 1.197, 1.197, 0.593, 0.593, 0.593, 0.593, 0.593, 0.593, 0.593, 0.593, -0.456, -0.456, -0.456, -0.456, -0.456, -0.456, -0.456, -0.318, -0.318, -0.318, -0.318, -0.318, -0.318, -0.318, 0.397, 0.397, 0.397, 0.397, 0.397, 0.397, 0.397, 0.397, 0.397, 0.397, 0.397, -0.041, -0.041, -0.041, -0.041, -0.041, -0.041, -0.041, -0.041, -0.041, -0.041, -0.041, -0.041, -0.041, 0.726, 0.726, 0.726, 0.726, 0.726, 0.726, 0.726, 0.726, 0.726, 0.726, 0.726, 0.726, 0.726, 0.726, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.160, 0.108, 0.108, 0.108, 0.108, 0.108, 0.108, 0.108, 0.108, 0.108, 0.108, 0.108],
                         12: [-0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.318, -0.318, -0.318, -0.318, -0.318, -0.318, -0.318, -0.318, -1.254, -1.254, -1.254, -1.254, -1.254, -1.254, -1.254, -1.254, -1.254, -2.031, -2.031, -2.031, -2.031, -2.031, -2.031, -2.031, 0.841, 0.841, 0.841, 0.841, 0.841, 0.841, 0.890, 0.890, 0.890, 0.890, 0.890, 0.890, 0.890, 0.890, -0.678, -0.678, -0.678, -0.678, -0.678, -0.678, -0.678, -1.024, -1.024, -1.024, -1.024, -1.024, -1.024, -1.024, 1.930, 1.930, 1.930, 1.930, 1.930, 1.930, 1.930, 1.930, 0.795, 0.795, 0.795, 0.795, 0.795, 0.795, 0.391, 0.391, 0.391, 0.391, 0.391, 0.391, 0.391, -1.173, -1.173, -1.173, -1.173, -1.173, -1.173, -1.173, -1.794, -1.794, -1.794, -1.794, -1.794, -1.794, -1.794, 0.701, 0.701, 0.701, 0.701, 0.701, 0.701, 0.701, 0.701, 1.157, 1.157, 1.157, 1.157, 1.157, 1.157, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.007, 0.916, 0.916, 0.916, 0.916, 0.916, -0.255, -0.255, -0.255, -0.255, -0.255, -0.255, -0.255, -0.492, -0.492, -0.492, -0.492, -0.492, -0.492, 0.414, 0.414, 0.414, 0.414, 0.414, 0.414, 0.414, 0.414, 1.120, 1.120, 1.120, 1.120, 1.120, 1.120, -0.359, -0.359, -0.359, -0.359, -0.359, -0.359, -0.359, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.229, 0.229, 0.229, 0.229, 0.229, 0.229, 0.229, 0.229, 0.229, 1.224, 1.224, 1.224, 1.224, 1.224, 1.224, 1.224, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.167, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.070, 0.070, 0.070, 0.070, 0.070, 0.070, 0.070, 0.752, 0.752, 0.752, 0.752, 0.752, 0.752, 0.752, 0.752, 0.061, 0.061, 0.061, 0.061, 0.061, 0.061, 0.061, 1.034, 1.034, 1.034, 1.034, 1.034, 1.034, 1.034, 1.034, 0.138, 0.138, 0.138, 0.138, 0.138, 0.138, 0.138, 0.138, 0.552, 0.552, 0.552, 0.552, 0.552, 0.552, 0.552, 0.552, -0.572, -0.572, -0.572, -0.572, -0.572, -0.572, -0.572, -0.572, -0.572, -0.435, -0.435, -0.435, -0.435, -0.435, -0.435, -0.435, 0.388, 0.388, 0.388, 0.388, 0.388, 0.388, 0.388, 0.388, 0.388, 0.388, 0.388, -0.062, -0.062, -0.062, -0.062, -0.062, -0.062, -0.062, -0.062, -0.062, -0.062, -0.062, -0.062, -0.062, 0.701, 0.701, 0.701, 0.701, 0.701, 0.701, 0.701, 0.701, 0.701, 0.701, 0.701, 0.701, 0.701, 0.150, 0.150, 0.150, 0.150, 0.150, 0.150, 0.150, 0.150, 0.150, 0.150, 0.150, 0.150, 0.150, 0.150, 0.150, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090]}

def normalise(signal):
    if len(signal) == 0:
        return signal
    mean = np.mean(signal)
    stdev = np.std(signal)
    if stdev > 0.0:
        return (signal - mean) / stdev
    else:
        return signal - mean
    
def get_signal_file(filetxt_path):
    signal_list = list()
    with open(filetxt_path, 'r') as f:
        signal_file = f.readlines()
        for line in signal_file:
            signal_Value = float(line.rstrip())
            signal_list.append(signal_Value)

    signal = np.array(signal_list)
    return normalise(signal)

def getBarcodePositonFromAdapter(refSigFile):
    refSig = get_signal_file(refSigFile)
    position = fromLongRefFindShortQuery(refSig, querySignalAdapter_kit)[1]
    return (position+40, position+40+supposeBarcodeSigLength)

def getBarcodePositonFromAdapterFile(refSigFile, adpterFilePath):
    refSig = get_signal_file(refSigFile)
    querySignalAdapter = get_signal_file(adpterFilePath)
    position = fromLongRefFindShortQuery(refSig, querySignalAdapter)[1]
    # print(position)
    # exit(-1)
    return (position+40, position+40+supposeBarcodeSigLength)

def getBarcodePositonFromTrueSig(refSigFile, barcodeIndex = 1, barcodeKit = 12):
    refSig = get_signal_file(refSigFile)[0:1000]
    barcodeSig = get_signal_file('../../data/barcode%d/timeSeries_%d.txt'%(barcodeKit, barcodeIndex-1))
    # position = fromLongRefFindShortQuery(refSig, native_start_barcodes[barcodeIndex])
    position = fromLongRefFindShortQuery(refSig, barcodeSig)
    return (position[0], position[1])
    
def main(ONTKit = 12, threadNum = 20):
    # 给定barcode套件，统计截取barcode的概率。
    sigNum = ONTKit * 1000
    basePath = '../../data/ONTBarcode%d'%ONTKit
    # sigNum = 100
    argsList1 = [(basePath + '/signal_%d.txt'%i, '../../exper_15bp_randomVSOurs/data/longFlankingSig/noise/adapter/timeSeries_0.txt') for i in range(sigNum)]
    pool = Pool(threadNum)
    res = list(tqdm(pool.starmap(getBarcodePositonFromAdapterFile, argsList1)))
    pool.close()
    pool.join()
    file1 = open('CalbarcodePositionONT%d.txt'%ONTKit, 'w')
    for item in res:
        file1.write('%d %d\n'%(item[0], item[1]))
    file1.close()
    
    argsList2 = [(basePath + '/signal_%d.txt'%i, int(i/1000)+1, ONTKit) for i in range(sigNum)]
    # print(argsList2)
    pool = Pool(threadNum)
    res = list(tqdm(pool.starmap(getBarcodePositonFromTrueSig, argsList2)))
    pool.close()
    pool.join()
    file2 = open('TruebarcodePositionONT%d.txt'%ONTKit, 'w')
    for item in res:
        file2.write('%d %d\n'%(item[0], item[1]))
    file1.close()
    
def getACCFrom2Files(file1 = 'TruebarcodePositionONT12.txt', file2 = 'CalbarcodePositionONT12.txt'):
    data1 = [[int(item) for item in line.strip('\n').split( )] for line in open(file1)]
    data2 = [[int(item) for item in line.strip('\n').split( )] for line in open(file2)]
    sum = 0
    count = 0
    for i in range(len(data1)):
        totalLen = data2[i][1] - data2[i][0]
        topLen = abs(data2[i][0] - data1[i][0])
        bottomLen = abs(data2[i][1] - data1[i][1])
        acc = 1-((topLen + bottomLen)/totalLen)
        if acc > 0.85:
            count += 1
        sum += acc
    avgAcc = sum / len(data1)
    otherAcc = count / len(data1)
    return avgAcc, otherAcc

def getAcc(ONTKit = 12):
    main(ONTKit, threadNum = 20)
    acc = getACCFrom2Files()
    print(acc)
    
    #../generate_nanoTruesig/barcode12/timeSeries_0.txt
def drawFig(sigFile = '../../data/barcode12/timeSeries_0.txt'):
    sigList = get_signal_file(sigFile)
    barcodesig = get_signal_file('../../data/ONTBarcode12/signal_6.txt')[562:872]
    plt.subplot(2,1,1)
    plt.plot(sigList[0:len(sigList)-1])
    plt.subplot(2,1,2)
    plt.plot(barcodesig)
    plt.show()

def getRandom1000SigData():
    # 如何说明截取的barcode是对的呢？
    # 基本思路：首先随机选取1000条纳米孔信号（长度为300左右），计算出距离矩阵，然后统计一下显著性。计算提取的barcode信号与直接生成
    # 的barcode信号之间的距离矩阵，然后查看这个距离分布是否符合相似的标准【统计显著性】。
    
    dirForBarcodeTest = 'randomSigForTestExtraction/'
    os.system('mkdir %s'%dirForBarcodeTest)
    baseSigPath = '../../data/ONTBarcode12/'
    signalList = [baseSigPath + item for item in os.listdir(baseSigPath)]
    randomSigList = random.sample(signalList, 1000) # 在../../data/ONTBarcode12 中随机选择1000条信号。
    t = 0
    for item in tqdm(randomSigList):
        sig = get_signal_file(item)
        sourceList = [i for i in range(0, len(sig)-310)]
        sampleList = random.sample(sourceList, 100) # 在每个信号里边随机截取信号，截取100条短信号。
        for index in range(0, len(sampleList)):
            sampledSig = sig[sampleList[index]: sampleList[index]+310]
            file = open(dirForBarcodeTest + 'timeSeries_%d.txt'%t, 'w')
            for val in sampledSig:
                file.write('%f\n'%val)
            t += 1

def getDistValue(distMatrixOutFilePrefixName = '../../tempoutput/barcode12.txt'):
    finalDistList = []
    with open(distMatrixOutFilePrefixName) as f:
        lines = f.readlines()
        for line in lines:
            distValueList = [float(item) for item in line.strip(
                '\n').split(' ') if item != '']
            finalDistList.append(distValueList)

    DistMatrix = [list(item) for item in np.transpose(finalDistList)]
    return DistMatrix

def demultiplexingByDistMatrix(DistMatrix=[[1, 2, 3, 4], [2, 1, 7, 9], [1, 2, 3, 4], [2, 1, 7, 9]]):
    
    # DistMatrix = [list(item) for item in np.transpose(DistMatrix)]
    resList = [row.index(min(row)) for row in DistMatrix]

    return resList

def findTrueIndex():
    os.system('mkdir ONTkit_12_extracted_barcodeSig')
    file = open('../../data/DemultiplexingRes12.txt')
    indexList = []
    for line in file:
        line = line.strip('\n').split('_')[-1].split('.')[0]
        indexList.append(line)
        # print(line)
    file.close()
    print(len(indexList))
    for i in tqdm(range(0, 12000)):
        os.system('cp ../../data/ONTBarcode12ParsedBarcodeSig/timeSeries_%d.txt \
                  ONTkit_12_extracted_barcodeSig/timeSeries_%s.txt'%(i, indexList[i]))
        
if __name__ == "__main__":
    # res1 = getBarcodePositonFromAdapter(refSigFile = '../../data/ONTBarcode12/signal_2.txt')
    # res2 = getBarcodePositonFromTrueSig(refSigFile = '../../data/ONTBarcode12/signal_2.txt', barcodeIndex=1)
    # print(res1, res2)
    
    # main()
    # main(ONTKit = 12, threadNum = 20)
    # main(ONTKit = 96, threadNum = 20)
    # drawFig('../../data/ONTBarcode12ParsedBarcodeSig/timeSeries_6.txt')
    # getRandom1000SigData()
    # getAcc(ONTKit = 24)
    
    # test = getDistValue()
    # print(len(test),len(test[1]))
    # resList = demultiplexingByDistMatrix(test)
    # print(resList)
    # print(test)
   
    # findTrueIndex()